#ifndef INLINE4_ZIP_H
#define INLINE4_ZIP_H

/*
** This file was auto generated by idltool 53.23.
**
** It provides compatibility to OS3 style library
** calls by substituting functions.
**
** Do not edit manually.
*/ 

#ifndef EXEC_TYPES_H
#include <exec/types.h>
#endif
#ifndef EXEC_EXEC_H
#include <exec/exec.h>
#endif
#ifndef EXEC_INTERFACES_H
#include <exec/interfaces.h>
#endif

#ifndef LIBRARIES_ZIP_H
#include <libraries/zip.h>
#endif
#include <interfaces/zip.h>

/* Inline macros for Interface "main" */
#define zip_archive_set_tempdir(za, tempdir) IZip->zip_archive_set_tempdir((za), (tempdir))
#define zip_close(za) IZip->zip_close((za))
#define zip_delete(za, idx) IZip->zip_delete((za), (idx))
#define zip_dir_add(za, name, flags) IZip->zip_dir_add((za), (name), (flags))
#define zip_discard(za) IZip->zip_discard((za))
#define zip_error_clear(za) IZip->zip_error_clear((za))
#define zip_error_get(za, zep, sep) IZip->zip_error_get((za), (zep), (sep))
#define zip_error_get_sys_type(ze) IZip->zip_error_get_sys_type((ze))
#define zip_error_to_str(buf, len, ze, se) IZip->zip_error_to_str((buf), (len), (ze), (se))
#define zip_fclose(zf) IZip->zip_fclose((zf))
#define zip_fdopen(fd_orig, _flags, zep) IZip->zip_fdopen((fd_orig), (_flags), (zep))
#define zip_file_add(za, name, source, flags) IZip->zip_file_add((za), (name), (source), (flags))
#define zip_file_error_clear(zf) IZip->zip_file_error_clear((zf))
#define zip_file_error_get(zf, zep, sep) IZip->zip_file_error_get((zf), (zep), (sep))
#define zip_file_extra_field_delete(za, idx, ef_idx, flags) IZip->zip_file_extra_field_delete((za), (idx), (ef_idx), (flags))
#define zip_file_extra_field_delete_by_id(za, idx, ef_id, ef_idx, flags) IZip->zip_file_extra_field_delete_by_id((za), (idx), (ef_id), (ef_idx), (flags))
#define zip_file_extra_field_set(za, idx, ef_id, ef_idx, data, len, flags) IZip->zip_file_extra_field_set((za), (idx), (ef_id), (ef_idx), (data), (len), (flags))
#define zip_file_extra_fields_count(za, idx, flags) IZip->zip_file_extra_fields_count((za), (idx), (flags))
#define zip_file_extra_fields_count_by_id(za, idx, ef_id, flags) IZip->zip_file_extra_fields_count_by_id((za), (idx), (ef_id), (flags))
#define zip_file_extra_field_get(za, idx, ef_idx, idp, lenp, flags) IZip->zip_file_extra_field_get((za), (idx), (ef_idx), (idp), (lenp), (flags))
#define zip_file_extra_field_get_by_id(za, idx, ef_id, ef_idx, lenp, flags) IZip->zip_file_extra_field_get_by_id((za), (idx), (ef_id), (ef_idx), (lenp), (flags))
#define zip_file_get_comment(za, idx, lenp, flags) IZip->zip_file_get_comment((za), (idx), (lenp), (flags))
#define zip_file_get_external_attributes(za, idx, flags, opsys, attributes) IZip->zip_file_get_external_attributes((za), (idx), (flags), (opsys), (attributes))
#define zip_file_rename(za, idx, name, flags) IZip->zip_file_rename((za), (idx), (name), (flags))
#define zip_file_replace(za, idx, source, flags) IZip->zip_file_replace((za), (idx), (source), (flags))
#define zip_file_set_comment(za, idx, comment, len, flags) IZip->zip_file_set_comment((za), (idx), (comment), (len), (flags))
#define zip_file_set_external_attributes(za, idx, flags, opsys, attributes) IZip->zip_file_set_external_attributes((za), (idx), (flags), (opsys), (attributes))
#define zip_file_strerror(zf) IZip->zip_file_strerror((zf))
#define zip_fopen(za, fname, flags) IZip->zip_fopen((za), (fname), (flags))
#define zip_fopen_encrypted(za, fname, flags, password) IZip->zip_fopen_encrypted((za), (fname), (flags), (password))
#define zip_fopen_index(za, index, flags) IZip->zip_fopen_index((za), (index), (flags))
#define zip_fopen_index_encrypted(za, index, flags, password) IZip->zip_fopen_index_encrypted((za), (index), (flags), (password))
#define zip_fread(zf, outbuf, toread) IZip->zip_fread((zf), (outbuf), (toread))
#define zip_get_archive_comment(za, lenp, flags) IZip->zip_get_archive_comment((za), (lenp), (flags))
#define zip_get_archive_flag(za, flag, flags) IZip->zip_get_archive_flag((za), (flag), (flags))
#define zip_get_name(za, idx, flags) IZip->zip_get_name((za), (idx), (flags))
#define zip_get_num_entries(za, flags) IZip->zip_get_num_entries((za), (flags))
#define zip_name_locate(za, fname, flags) IZip->zip_name_locate((za), (fname), (flags))
#define zip_open(fn, _flags, zep) IZip->zip_open((fn), (_flags), (zep))
#define zip_set_archive_comment(za, comment, len) IZip->zip_set_archive_comment((za), (comment), (len))
#define zip_set_archive_flag(za, flag, value) IZip->zip_set_archive_flag((za), (flag), (value))
#define zip_set_default_password(za, passwd) IZip->zip_set_default_password((za), (passwd))
#define zip_set_file_compression(za, idx, method, flags) IZip->zip_set_file_compression((za), (idx), (method), (flags))
#define zip_source_buffer(za, data, len, freep) IZip->zip_source_buffer((za), (data), (len), (freep))
#define zip_source_file(za, fname, start, len) IZip->zip_source_file((za), (fname), (start), (len))
#define zip_source_filep(za, file, start, len) IZip->zip_source_filep((za), (file), (start), (len))
#define zip_source_free(src) IZip->zip_source_free((src))
#define zip_source_function(za, zcb, ud) IZip->zip_source_function((za), (zcb), (ud))
#define zip_source_zip(za, srcza, srcidx, flags, start, len) IZip->zip_source_zip((za), (srcza), (srcidx), (flags), (start), (len))
#define zip_stat(za, fname, flags, st) IZip->zip_stat((za), (fname), (flags), (st))
#define zip_stat_index(za, index, flags, st) IZip->zip_stat_index((za), (index), (flags), (st))
#define zip_stat_init(st) IZip->zip_stat_init((st))
#define zip_strerror(za) IZip->zip_strerror((za))
#define zip_unchange(za, idx) IZip->zip_unchange((za), (idx))
#define zip_unchange_all(za) IZip->zip_unchange_all((za))
#define zip_unchange_archive(za) IZip->zip_unchange_archive((za))
#define zip_get_error(za) IZip->zip_get_error((za))
#define zip_error_code_zip(error) IZip->zip_error_code_zip((error))
#define zip_error_code_system(error) IZip->zip_error_code_system((error))
#define zip_error_fini(error) IZip->zip_error_fini((error))
#define zip_error_init(error) IZip->zip_error_init((error))
#define zip_error_init_with_code(error, ze) IZip->zip_error_init_with_code((error), (ze))
#define zip_error_set(error, ze, se) IZip->zip_error_set((error), (ze), (se))
#define zip_error_strerror(error) IZip->zip_error_strerror((error))
#define zip_error_system_type(error) IZip->zip_error_system_type((error))
#define zip_error_to_data(error, data, length) IZip->zip_error_to_data((error), (data), (length))
#define zip_open_from_source(zs, flags, ze) IZip->zip_open_from_source((zs), (flags), (ze))

#endif /* INLINE4_ZIP_H */
